// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixSourceManager
import AVFoundation
import AVKit
import AVFoundation.AVMetadataObject
import Au10tixCore
import CoreImage
import CoreLocation
import CoreMedia
import CoreMotion
import CoreVideo
import Foundation
import ImageIO
import QuartzCore
import Swift
import UIKit
import _Concurrency
public protocol Au10tixSourceManagerProtocol {
  func startSession(for source: Au10tixSourceManager.SourceType, delegate: Au10tixSourceManager.Au10SourceToSession?, with configurations: [Swift.String : Any], previewView: UIKit.UIView) throws
  func stopCameraSession()
  func stopAllSessions()
  func canCaptureStillImage() -> Swift.Bool
  func captureStillImage(_ source: Au10tixCore.Au10ImageSource)
  func provide(image: Foundation.Data, exif: [Swift.String : Any], orientation: ImageIO.CGImagePropertyOrientation)
  func resumeCamera()
  func pauseCamera()
  func isSourceAvailable(sourceType: Au10tixSourceManager.SourceType) -> Swift.Bool
  func isCameraActive() -> Swift.Bool
  func imageResolution() -> CoreGraphics.CGSize
  func setFaceMetadataDetection(delegate: Au10tixSourceManager.Au10MetadataOutputDelegate)
  func setMetadataDetection(of types: [Au10tixSourceManager.MetadataObjectType], delegate: Au10tixSourceManager.Au10MetadataOutputDelegate)
  func prefersAspectFillCameraPreview()
}
extension Au10tixSourceManager.Au10tixSourceManagerProtocol {
  public static func isMissingCameraPermission() -> Swift.Bool
  public static func isCameraRestricted() -> Swift.Bool
  public static func isCameraAuthorized() -> Swift.Bool
}
public struct Au10CaptureFrameUpdate {
  public var imageBuffer: CoreVideo.CVImageBuffer
  public let cameraIntrinsicData: CoreFoundation.CFTypeRef?
  public let exifOrientation: ImageIO.CGImagePropertyOrientation
  public init(data: CoreVideo.CVImageBuffer, cameraIntrinsicData: CoreFoundation.CFTypeRef?, exifOrientation: ImageIO.CGImagePropertyOrientation)
}
public protocol Au10SourceToSession : AnyObject {
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didGetSourceError sourceError: Swift.Error)
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didGetSourceUpdate sourceUpdate: Au10tixCore.Au10Update)
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didGetFrame captureFrameUpdate: Au10tixSourceManager.Au10CaptureFrameUpdate)
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didGetSample captureSampleUpdate: Au10tixSourceManager.CaptureSampleUpdate)
  func sourceManagerCameraDidSuspend(_ manager: Au10tixSourceManager.Au10SourceManager)
  func sourceManagerCameraDidResume(_ manager: Au10tixSourceManager.Au10SourceManager)
}
extension Au10tixSourceManager.Au10SourceToSession {
  public func sourceManagerCameraDidSuspend(_ manager: Au10tixSourceManager.Au10SourceManager)
  public func sourceManagerCameraDidResume(_ manager: Au10tixSourceManager.Au10SourceManager)
}
public protocol Au10MotionSourceDelegate : AnyObject {
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didDetectStability isStable: Swift.Bool)
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didDetectFacingAngle isInRange: Swift.Bool)
}
public protocol Au10MetadataOutputDelegate : AnyObject {
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didDetect metadataFaceObject: Au10tixSourceManager.Au10MetadataFaceObject)
  func sourceManager(_ manager: Au10tixSourceManager.Au10SourceManager, didDetect metadataObjects: [Au10tixSourceManager.Au10MetadataMachineReadableCodeObject])
}
public struct Au10MetadataMachineReadableCodeObject {
  public let type: Au10tixSourceManager.MetadataObjectType?
  public let corners: [CoreGraphics.CGPoint]
  public let value: Swift.String?
  public init(type: Au10tixSourceManager.MetadataObjectType?, corners: [CoreGraphics.CGPoint], value: Swift.String?)
}
public enum SourceType {
  case undefined
  case cameraFront(record: Swift.Bool = false)
  case cameraBack(record: Swift.Bool = false)
  case mic
  case nfc
  case stability
  case facingAngle
}
extension Au10tixSourceManager.SourceType : Swift.Equatable {
  public static func == (a: Au10tixSourceManager.SourceType, b: Au10tixSourceManager.SourceType) -> Swift.Bool
}
public enum MetadataObjectType : Swift.String {
  case code39
  case code39Mod43
  case code93
  case code128
  case ean8
  case ean13
  case interleaved2of5
  case itf14
  case upce
  case aztec
  case dataMatrix
  case pdf417
  case qr
  case face
  public static func all1DBarcodes() -> [Au10tixSourceManager.MetadataObjectType]
  public static func all2DBarcodes() -> [Au10tixSourceManager.MetadataObjectType]
  public static func allBarcodes() -> [Au10tixSourceManager.MetadataObjectType]
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct CameraConfiguration {
  public enum Position : Swift.String, Swift.Codable {
    case front
    case back
    case unspecified
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SessionPreset {
    case photo
    case none
    public static func == (a: Au10tixSourceManager.CameraConfiguration.SessionPreset, b: Au10tixSourceManager.CameraConfiguration.SessionPreset) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
final public class CaptureSampleUpdate {
  final public let sample: Foundation.Data
  final public var source: Au10tixCore.Au10ImageSource
  final public let exifOrientation: ImageIO.CGImagePropertyOrientation
  public init(sample: Foundation.Data, source: Au10tixCore.Au10ImageSource, exifOrientation: ImageIO.CGImagePropertyOrientation)
  final public var isAlbum: Swift.Bool {
    get
  }
  final public var isCamera: Swift.Bool {
    get
  }
  @objc deinit
}
public enum CameraError : Swift.Error {
  case noPermission
  case cameraRestricted
  case canNotAddInput
  case canNotAddVideoOutput
  case canNotAddPhotoOutput
  case videoFrameError
  case captureImageFailed
  public static func == (a: Au10tixSourceManager.CameraError, b: Au10tixSourceManager.CameraError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Au10MetadataFaceObject {
  public let face: AVFoundation.AVMetadataFaceObject
}
extension Au10tixCore.Au10Image {
  convenience public init?(captureSampleUpdate sample: Au10tixSourceManager.CaptureSampleUpdate)
  convenience public init(captureFrameUpdate frameUpdate: Au10tixSourceManager.Au10CaptureFrameUpdate)
}
final public class Au10SourceManager : Au10tixSourceManager.Au10tixSourceManagerProtocol {
  weak final public var delegate: Au10tixSourceManager.Au10SourceToSession?
  weak final public var motionDelegate: Au10tixSourceManager.Au10MotionSourceDelegate?
  weak final public var metadataDelegate: Au10tixSourceManager.Au10MetadataOutputDelegate?
  public init(types: [Au10tixSourceManager.SourceType], preset: Au10tixSourceManager.CameraConfiguration.SessionPreset = .photo, responseQueue: Dispatch.DispatchQueue = DispatchQueue(label: "com.au10tix.sdk.defaultQueue",qos: .default))
  @objc deinit
  final public func isSourceAvailable(sourceType: Au10tixSourceManager.SourceType) -> Swift.Bool
  final public func startSession(for source: Au10tixSourceManager.SourceType, delegate: Au10tixSourceManager.Au10SourceToSession?, with configurations: [Swift.String : Any], previewView: UIKit.UIView) throws
  final public func startMotionDetection(sources: [Au10tixSourceManager.SourceType] = [.stability, .facingAngle], delegate: Au10tixSourceManager.Au10MotionSourceDelegate?, configurations: [Swift.String : Any])
  final public func imageResolution() -> CoreGraphics.CGSize
  final public func stopCameraSession()
  final public func stopMotionWorkers()
  final public func resumeCamera()
  final public func pauseCamera()
  final public func stopAllSessions()
  final public func canCaptureStillImage() -> Swift.Bool
  final public func captureStillImage(_ source: Au10tixCore.Au10ImageSource)
  final public func provide(image data: Foundation.Data, exif: [Swift.String : Any], orientation: ImageIO.CGImagePropertyOrientation)
  final public func setFaceMetadataDetection(delegate: Au10tixSourceManager.Au10MetadataOutputDelegate)
  final public func setMetadataDetection(of types: [Au10tixSourceManager.MetadataObjectType], delegate: Au10tixSourceManager.Au10MetadataOutputDelegate)
  final public func isCameraActive() -> Swift.Bool
  final public func prefersAspectFillCameraPreview()
}
extension Au10tixSourceManager.MetadataObjectType : Swift.Equatable {}
extension Au10tixSourceManager.MetadataObjectType : Swift.Hashable {}
extension Au10tixSourceManager.MetadataObjectType : Swift.RawRepresentable {}
extension Au10tixSourceManager.CameraConfiguration.Position : Swift.Equatable {}
extension Au10tixSourceManager.CameraConfiguration.Position : Swift.Hashable {}
extension Au10tixSourceManager.CameraConfiguration.Position : Swift.RawRepresentable {}
extension Au10tixSourceManager.CameraConfiguration.SessionPreset : Swift.Equatable {}
extension Au10tixSourceManager.CameraConfiguration.SessionPreset : Swift.Hashable {}
extension Au10tixSourceManager.CameraError : Swift.Equatable {}
extension Au10tixSourceManager.CameraError : Swift.Hashable {}
