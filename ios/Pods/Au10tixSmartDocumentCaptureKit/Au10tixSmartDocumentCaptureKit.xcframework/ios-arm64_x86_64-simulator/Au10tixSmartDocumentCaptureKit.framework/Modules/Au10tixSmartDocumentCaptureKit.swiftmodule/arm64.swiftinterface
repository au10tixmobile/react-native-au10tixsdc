// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixSmartDocumentCaptureKit
import Au10tixCore
@_exported import Au10tixSmartDocumentCaptureKit
import Au10tixSourceManager
import CoreGraphics
import Foundation
import ImageIO
import Swift
import UIKit
import Vision
import _Concurrency
public enum MachineReadableCodeType : Swift.String {
  case code39
  case code39Mod43
  case code93
  case code128
  case ean8
  case ean13
  case interleaved2of5
  case itf14
  case upce
  case aztec
  case dataMatrix
  case pdf417
  case qr
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct SmartDocumentCaptureConfiguration {
}
public enum SDCSessionFlowType : Swift.Int {
  case sdc
  case poa
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class SDCStatistics {
  weak public var delegate: Au10tixSmartDocumentCaptureKit.SDCStatisticsDelegate?
  public static let shared: Au10tixSmartDocumentCaptureKit.SDCStatistics
  public func willStartSession()
  public func willStartRoundTrip()
  public func didFinishRoundTrip()
  public func willStartParsing()
  public func didFinishParsing()
  public func willStartStability()
  public func didPassStability()
  public func getSessionData() -> Au10tixSmartDocumentCaptureKit.SDCStatisticsSessionData
  @objc deinit
}
public struct SDCStatisticsLiveData {
  public var singleFrameRoundTripTime: Foundation.TimeInterval?
  public var singleResponseParsingTime: Foundation.TimeInterval?
}
public struct SDCStatisticsSessionData {
  public var averageFrameRoundTripTime: Foundation.TimeInterval?
  public var stabilityResponseTime: Foundation.TimeInterval?
  public var averageParsingTime: Foundation.TimeInterval?
  public var averageProcessingFramesPreSession: Swift.Double?
}
public protocol SDCStatisticsDelegate : AnyObject {
  func sdcStatisticsDidUpdate(_ liveStatistics: Au10tixSmartDocumentCaptureKit.SDCStatisticsLiveData)
}
public enum SDCSessionError : Swift.Error {
  case timedout
  case sessionTokenExpired
  case smartDocumentCheckFailed(error: Swift.Error)
  case smartDocumentCheckTimeout
}
public protocol SDCSessionDelegate : AnyObject {
  func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didFailWithError error: Au10tixSmartDocumentCaptureKit.SDCSessionError)
  func sdcSessionWillTakeImage(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession)
  func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didTake image: Au10tixCore.Au10Image)
  func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didProcess processingStatus: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus)
  func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didCapture image: Au10tixCore.Au10Image, croppedImage: Au10tixCore.Au10Image?, with processingStatus: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus)
  func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didDetect machineReadableCodes: [Au10tixSmartDocumentCaptureKit.Au10MachineReadableCode])
}
extension Au10tixSmartDocumentCaptureKit.SDCSessionDelegate {
  public func sdcSession(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession, didDetect machineReadableCodes: [Au10tixSmartDocumentCaptureKit.Au10MachineReadableCode])
  public func sdcSessionWillTakeImage(_ sdcSession: Au10tixSmartDocumentCaptureKit.SDCSession)
}
public struct Au10MachineReadableCode {
  public let type: Au10tixSmartDocumentCaptureKit.MachineReadableCodeType?
  public let corners: [CoreGraphics.CGPoint]
  public let value: Swift.String?
}
@_hasMissingDesignatedInitializers public class SDCSession : Au10tixCore.FrontSideSupporter, Au10tixCore.Au10tixSession, Au10tixCore.CameraSession, Au10tixCore.ImageProvidableSession {
  public var isAvailable: Swift.Bool {
    get
  }
  public var isCameraActive: Swift.Bool {
    get
  }
  final public let authenticator: Au10tixCore.Au10tixSessionAuthenticator
  public var isFrontSide: Swift.Bool
  public var flowType: Au10tixSmartDocumentCaptureKit.SDCSessionFlowType
  weak public var delegate: Au10tixSmartDocumentCaptureKit.SDCSessionDelegate?
  convenience public init()
  public func set(responseQueue: Dispatch.DispatchQueue)
  public func setRectOfInterest(startX: CoreGraphics.CGFloat, endX: CoreGraphics.CGFloat, startY: CoreGraphics.CGFloat, endY: CoreGraphics.CGFloat) throws
  public func start(with token: Swift.String, previewView: UIKit.UIView, didStartHandler: @escaping (Swift.Result<Swift.String, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  public func stop()
  public func captureImage(_ source: Au10tixCore.Au10ImageSource)
  public func pauseCamera()
  public func resumeCamera()
  public func provide(image: Foundation.Data, exif: [Swift.String : Any], orientation: ImageIO.CGImagePropertyOrientation)
  public func prefersAspectFillCameraPreview()
  @objc deinit
}
extension Au10tixSmartDocumentCaptureKit.SDCSession : Au10tixCore.TimeoutableSessionDelegate {
  public func sessionTimedout(_ timeoutable: Au10tixCore.Timeoutable)
}
@_hasMissingDesignatedInitializers public class SDCProcessingStatus : Au10tixCore.Au10Update {
  public enum Feedback {
    case badQuality
    case good
    case noIdFound
    case tooClose
    case tooFar
    case outOfFrame
    case verticallyAligned
    public static func == (a: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback, b: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var sdcFeedback: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback? {
    get
  }
  public var poaFeedback: Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback? {
    get
  }
  @objc public var jsonString: Swift.String? {
    @objc get
  }
  @objc public var isValid: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public enum RectOfInterestError : Swift.Error {
  case rectExceededRange
  case rectReversedValues
  public static func == (a: Au10tixSmartDocumentCaptureKit.RectOfInterestError, b: Au10tixSmartDocumentCaptureKit.RectOfInterestError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Au10tixSmartDocumentCaptureKit.MachineReadableCodeType : Swift.Equatable {}
extension Au10tixSmartDocumentCaptureKit.MachineReadableCodeType : Swift.Hashable {}
extension Au10tixSmartDocumentCaptureKit.MachineReadableCodeType : Swift.RawRepresentable {}
extension Au10tixSmartDocumentCaptureKit.SDCSessionFlowType : Swift.Equatable {}
extension Au10tixSmartDocumentCaptureKit.SDCSessionFlowType : Swift.Hashable {}
extension Au10tixSmartDocumentCaptureKit.SDCSessionFlowType : Swift.RawRepresentable {}
extension Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback : Swift.Equatable {}
extension Au10tixSmartDocumentCaptureKit.SDCProcessingStatus.Feedback : Swift.Hashable {}
extension Au10tixSmartDocumentCaptureKit.RectOfInterestError : Swift.Equatable {}
extension Au10tixSmartDocumentCaptureKit.RectOfInterestError : Swift.Hashable {}
