// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixDetectorManager
import Au10tixCore
import CoreGraphics
import Foundation
import Swift
import UIKit
import Vision
import _Concurrency
public struct Face {
  public var boundingBox: CoreGraphics.CGRect?
  public var isSmiling: Swift.Bool?
  public var smilingConfidence: Swift.Int?
  public var isLeftEyeClosed: Swift.Bool
  public var isRightEyeClosed: Swift.Bool
  public var pitch: Swift.Float?
  public var yaw: Swift.Float?
  public var roll: Swift.Float?
  public init(boundingBox: CoreGraphics.CGRect? = nil, isSmiling: Swift.Bool? = nil, smilingConfidence: Swift.Int? = nil, isLeftEyeClosed: Swift.Bool = false, isRightEyeClosed: Swift.Bool = false, pitch: Swift.Float? = nil, yaw: Swift.Float? = nil, roll: Swift.Float? = nil)
}
final public class FaceDetector {
  public init()
  @objc deinit
  public static func isAvailable() -> Swift.Bool
  final public func detectFace(view: UIKit.UIView, in imageBuffer: CoreVideo.CVImageBuffer, completionBlock: @escaping (Swift.Result<[Au10tixDetectorManager.Face], Swift.Error>) -> Swift.Void)
  final public func detectFace(in image: Foundation.Data, completion: @escaping (Swift.Result<[Au10tixDetectorManager.Face], Swift.Error>) -> Swift.Void)
}
public enum DetectorType {
  case face
  case document
  case nfc
  public static func == (a: Au10tixDetectorManager.DetectorType, b: Au10tixDetectorManager.DetectorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Au10tixDetectorManager.DetectorType : Swift.Equatable {}
extension Au10tixDetectorManager.DetectorType : Swift.Hashable {}
